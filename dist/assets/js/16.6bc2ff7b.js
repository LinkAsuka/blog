(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{295:function(e,t,n){"use strict";n.r(t);var a=n(13),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"js基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js基础"}},[e._v("#")]),e._v(" js基础")]),e._v(" "),t("h2",{attrs:{id:"一、dom操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、dom操作"}},[e._v("#")]),e._v(" 一、dom操作")]),e._v(" "),t("h3",{attrs:{id:"_1-获取节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-获取节点"}},[e._v("#")]),e._v(" 1.获取节点")]),e._v(" "),t("p",[e._v("document."),t("strong",[e._v("getElementById")]),e._v("(idName)      //通过id名来获取元素，返回一个元素对象")]),e._v(" "),t("p",[e._v("document."),t("strong",[e._v("getElementsByName")]),e._v("(name)    //通过name属性获取元素，返回元素对象数组")]),e._v(" "),t("p",[e._v("document."),t("strong",[e._v("getElementsByClassName")]),e._v("(className)  //通过class名来获取元素，返回元素对象数组（ie8以上）")]),e._v(" "),t("p",[e._v("document."),t("strong",[e._v("getElementsByTagName")]),e._v("(tagName)    //通过标签名获取元素，返回元素对象数组")]),e._v(" "),t("h3",{attrs:{id:"_2-创建节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建节点"}},[e._v("#")]),e._v(" 2.创建节点")]),e._v(" "),t("p",[e._v("document."),t("strong",[e._v("createElement")]),e._v('("h3")    //创建一个html元素，这里以创建h3元素为例')]),e._v(" "),t("p",[e._v("document."),t("strong",[e._v("createTextNode")]),e._v("(String); //创建一个文本节点；")]),e._v(" "),t("p",[e._v("document."),t("strong",[e._v("createAttribute")]),e._v('("class"); //创建一个属性节点，这里以创建class属性为例')]),e._v(" "),t("h3",{attrs:{id:"_3-增加节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-增加节点"}},[e._v("#")]),e._v(" 3.增加节点")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("appendChild")]),e._v("(Node);  //往element内部最后面添加一个节点，参数是节点类型")]),e._v(" "),t("p",[e._v("elelment."),t("strong",[e._v("insertBefore")]),e._v("(newNode,existingNode); //在element内部的中在existingNode前面插入newNode")]),e._v(" "),t("h3",{attrs:{id:"_4-删除节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-删除节点"}},[e._v("#")]),e._v(" 4.删除节点")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("removeChild")]),e._v("(Node)   //删除当前节点下指定的子节点，删除成功返回该被删除的节点，否则返回null")]),e._v(" "),t("h3",{attrs:{id:"_5-获取元素相关的节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-获取元素相关的节点"}},[e._v("#")]),e._v(" 5.获取元素相关的节点")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("parentNode")]),e._v("//返回当前元素的父节点对象")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("chlidren")]),e._v("//返回当前元素所有子元素节点对象，只返回HTML节点")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("chilidNodes")]),e._v(" //返回当前元素多有子节点，包括文本，HTML，属性节点。（回车也会当做一个节点）")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("firstChild")]),e._v(" //返回当前"),t("strong",[e._v("节点")]),e._v("的第一个子节点对象    （"),t("strong",[e._v("节点")]),e._v("）")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("firstElementChild")]),e._v(" //返回当前"),t("strong",[e._v("元素")]),e._v("的第一个子节点对象   （"),t("strong",[e._v("元素")]),e._v("）")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("lastChild")]),e._v("//返回当前"),t("strong",[e._v("节点")]),e._v("的最后一个子节点对象    （"),t("strong",[e._v("节点")]),e._v("）")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("lastElementChild")]),e._v(" //返回当前"),t("strong",[e._v("元素")]),e._v("的第一个子节点对象   （"),t("strong",[e._v("元素")]),e._v("）")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("nextSibling")]),e._v("//返回当前"),t("strong",[e._v("节点")]),e._v("的下一个同级"),t("strong",[e._v("节点")]),e._v(" 没有就返回null  （"),t("strong",[e._v("节点")]),e._v("）")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("nextElementSibling")]),e._v("//返回当前"),t("strong",[e._v("元素")]),e._v("的下一个同级"),t("strong",[e._v("元素")]),e._v(" 没有就返回null  （"),t("strong",[e._v("元素")]),e._v("）")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("previousSibling")]),e._v(" //返回当前"),t("strong",[e._v("节点")]),e._v("上一个同级"),t("strong",[e._v("节点")]),e._v(" 没有就返回null  （"),t("strong",[e._v("节点")]),e._v("）")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("previousElementSibling")]),e._v(" //返回当前"),t("strong",[e._v("元素")]),e._v("上一个同级"),t("strong",[e._v("元素")]),e._v(" 没有就返回null  （"),t("strong",[e._v("元素")]),e._v("）")]),e._v(" "),t("h3",{attrs:{id:"_6-获取元素文本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-获取元素文本"}},[e._v("#")]),e._v(" 6.获取元素文本")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("innerHTML")]),e._v("//返回元素的所有文本，包括html代码")]),e._v(" "),t("p",[e._v("element."),t("strong",[e._v("innerText")]),e._v(" //返回当前元素的自身及子代所有文本值，只是文本内容，不包括html代码")]),e._v(" "),t("h3",{attrs:{id:"_7-样式操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-样式操作"}},[e._v("#")]),e._v(" 7.样式操作")]),e._v(" "),t("p",[e._v('document.getElementById(  " id "  ).style.color="red";')]),e._v(" "),t("h3",{attrs:{id:"字符串方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串方法"}},[e._v("#")]),e._v(" 字符串方法")]),e._v(" "),t("p",[e._v("String charAt 返回在指定位置的字符。 charCodeAt 返回在指定的位置的字符的 Unicode 编码。 IndexOf 返回某个指定的字符串值在字符串中首次出现的位置。 slice 提取字符串的片断，并在新的字符串中返回被提取的部分。 split 把字符串分割为字符串数组。 toLowerCase 把字符串转换为小写。 toUpperCase 把字符串转换为大写。 trim 去除字符串两边的空白")]),e._v(" "),t("p",[e._v("模板字符串")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let name = '张三'\nlet str1 = `名字${name}`\n")])])]),t("h3",{attrs:{id:"数组方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组方法"}},[e._v("#")]),e._v(" 数组方法")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("join()")]),e._v(" "),t("p",[e._v("数组转字符串，参数为分隔符。返回字符串，原数组不变。")])]),e._v(" "),t("li",[t("p",[e._v("push()和pop()")]),e._v(" "),t("p",[e._v("向数组的末尾添加元素，返回数组长度，原数组改变。")]),e._v(" "),t("p",[e._v("删除数组的末尾元素，返回删除的元素，原数组改变")])]),e._v(" "),t("li",[t("p",[e._v("shift() 和 unshift()")]),e._v(" "),t("p",[e._v("删除数组的第一个元素，返回删除元素，原数组改变。")]),e._v(" "),t("p",[e._v("向数组的开头增加元素，返回数组长度，原数组改变。")])]),e._v(" "),t("li",[t("p",[e._v("sort()")]),e._v(" "),t("p",[e._v("对数组的元素进行排序，默认按照字符编码排序，参数为函数。返回新数组，原数组改变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    let arr1 = arr.sort(function (a, b) {\n        return a - b\n    }) // 升序排序\n")])])])]),e._v(" "),t("li",[t("p",[e._v("reverse() 反转数组的元素顺序。返回新数组，原数组改变。")])]),e._v(" "),t("li",[t("p",[e._v("concat() 合并数组，返回新数组，原数组不变。")])]),e._v(" "),t("li",[t("p",[e._v("slice() 数组截取")]),e._v(" "),t("p",[e._v("arrayObject.slice(start,end)，返回所选范围的元素的数组，原数组不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // let arr1 = arr.slice(1,3) //从索引为1开始到索引为3之前结束\n    // let arr1 = arr.slice(2) //从索引为2开始全部\n    // let arr1 = arr.slice(-1)  // 从末尾元素开始选\n")])])])]),e._v(" "),t("li",[t("p",[e._v("splice() 删除或新增")]),e._v(" "),t("p",[e._v("arrayObject.splice(index,howmany,item1,.....,itemX)")]),e._v(" "),t("p",[e._v("从数组中添加或删除元素，返回被删除的元素数组，原数组改变")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let arr1 = arr.splice(1, 2, 'new') //从索引为1开始删除两个元素，并在该位置添加元素\n")])])])]),e._v(" "),t("li",[t("p",[e._v("indexOf()和 lastIndexOf()")]),e._v(" "),t("p",[e._v("返回参数在数组中的位置，原数组不变。")]),e._v(" "),t("p",[e._v("返回参数在数组中最后出现的位置，原数组不变。")])]),e._v(" "),t("li",[t("p",[e._v("includes() 判断一个数组是否包含一个指定的值。返回布尔值，原数组不变。")])]),e._v(" "),t("li",[t("p",[e._v("find()和findIndex()")]),e._v(" "),t("p",[e._v("返回数组中符合条件的第一个元素，参数为函数，原数组不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    let arr1 = arr.find(function (e) {\n        return e > 2\n    })  \n")])])]),t("p",[e._v("返回数组中符合条件的第一个元素的索引。")])]),e._v(" "),t("li",[t("p",[e._v("flat() 多维数组转一维数组，返回新数组，原数组不变。")])]),e._v(" "),t("li",[t("p",[e._v("forEach() 和map()")]),e._v(" "),t("p",[e._v("遍历数组，forEach没有返回，map返回新数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // arr.forEach(e, i, arr => {\n    //     console.log(e, i, arr)\n    // });\n    let arr1 = arr.map(e, i, arr => {\n        return e = e + 1\n    })\n")])])])]),e._v(" "),t("li",[t("p",[e._v("filter() 返回数组中符合条件的全部元素，参数为函数，原数组不变。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    let arr1 = arr.filter((e) => {\n        return e > 3\n    })\n")])])])]),e._v(" "),t("li",[t("p",[e._v("every() 和 some()")]),e._v(" "),t("p",[e._v("every()是对数组中每一项运行给定函数，如果该函数对每一项返回true,则返回true。")]),e._v(" "),t("p",[e._v("some()是对数组中每一项运行给定函数，如果该函数对任一项返回true,则返回true。")])])]),e._v(" "),t("h3",{attrs:{id:"date时间对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#date时间对象"}},[e._v("#")]),e._v(" Date时间对象")]),e._v(" "),t("p",[e._v("getFullYear 从 Date 对象以四位数字返回年份。 getMonth 从 Date 对象返回月份 (0 ~ 11)。 getDate 从 Date 对象返回一个月中的某一天 (1 ~ 31)。 getHours 返回 Date 对象的小时 (0 ~ 23)。 getMinutes 返回 Date 对象的分钟 (0 ~ 59)。 getSeconds 返回 Date 对象的秒数 (0 ~ 59)。 getDay 从 Date 对象返回一周中的某一天 (0 ~ 6)。 getTime 返回 1970 年 1 月 1 日至今的毫秒数。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    let time = new Date()\n    let year = time.getFullYear()\n    let mon = time.getMonth() + 1\n    let day = time.getDate()\n    let hou = time.getHours()\n    let min = time.getMinutes()\n    let timeStr = time.getTime()\n    console.log(time)\n    console.log(year, mon, day, hou, min)\n    console.log(timeStr)\n")])])]),t("h3",{attrs:{id:"数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[e._v("#")]),e._v(" 数据类型")]),e._v(" "),t("p",[e._v("1.基本数据类型（栈）：Number，String，Boolean，Undefined，Null，Symbol(es6)")]),e._v(" "),t("p",[e._v("2.引用数据类型（堆）：Object,Array,Function , Date")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 判断数据类型  Object.prototype.toString.call()\n    console.log(Object.prototype.toString.call('1')) //[object String]\n    console.log(Object.prototype.toString.call(true)) //[object Boolean]\n    console.log(Object.prototype.toString.call([])) //[object Array]\n    console.log(Object.prototype.toString.call({})) //[object Object]\n")])])]),t("h3",{attrs:{id:"new操作符在创建实例的经历的阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new操作符在创建实例的经历的阶段"}},[e._v("#")]),e._v(" new操作符在创建实例的经历的阶段")]),e._v(" "),t("p",[e._v("new创建了一个对象，共经历了4个阶段：")]),e._v(" "),t("p",[e._v("\\1. 创建一个空对象")]),e._v(" "),t("p",[e._v("\\2. 设置原型链")]),e._v(" "),t("p",[e._v("\\3. 让实例化对象中的this指向对象，并执行函数体")]),e._v(" "),t("p",[e._v("\\4. 返回创建的对象")]),e._v(" "),t("h3",{attrs:{id:"闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[e._v("#")]),e._v(" 闭包")]),e._v(" "),t("p",[e._v("函数内部嵌套的函数")]),e._v(" "),t("p",[e._v("有权访问另一个函数作用域中的变量的函数。常见方式，就是在一个函数内部创建另一个函数。")]),e._v(" "),t("p",[e._v("功能：在函数外，访问函数内的变量；保持引用，不被回收。创建私有环境")]),e._v(" "),t("p",[e._v("缺点：内存泄漏")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("        function fn() {\n            let a = 11\n            return function () {\n                console.log(a)\n            }\n        }\n        console.log(fn())\n        let fn1 = fn()\n        fn1()\n")])])]),t("h3",{attrs:{id:"原型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[e._v("#")]),e._v(" 原型")]),e._v(" "),t("p",[e._v("1.每一个函数都有一个'prototype'属性,即显示原型。prototype(对象属性)的所有属性和方法，都会被构造函数的实例继承。")]),e._v(" "),t("p",[e._v("2.每一个实例对象都有一个'__ proto __ '属性，即隐式原型。")]),e._v(" "),t("p",[e._v("原型链")]),e._v(" "),t("p",[e._v("获取对象属性时，如果对象本身没有这个属性，就会去找这个对象'__ proto __ '属性指向上一个对象，一直找到最顶层("),t("code",[e._v("Object.prototype")]),e._v(")为止。Object.prototype对象也有"),t("strong",[e._v("proto")]),e._v("属性值为null")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 原型\n    // 获取原型的方法\n    // 1.对象的 '__proto__'\n    // 2.构造函数的prototype\n\n    // let cat = {\n    //     name: '喵喵'\n    // }\n    // cat.__proto__.eat = function () {\n    //     console.log('吃鱼')\n    // }\n    // cat.eat()\n\n    // function Cat(name, age) {\n    //     this.name = name\n    //     this.age = age\n    // }\n\n    // let cat = new Cat('喵喵', 2)\n    // Cat.prototype.eat = function () {\n    //     console.log('吃鱼')\n    // }\n    // console.log(cat)\n    // cat.eat()\n")])])]),t("h3",{attrs:{id:"深拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[e._v("#")]),e._v(" 深拷贝")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 深拷贝浅拷贝\n\n    // Object.assign() 对象只有一层时是深拷贝\n    // let obj = {\n    //     name: '张三',\n    //     age: 18\n    // }\n\n    // let obj1 = Object.assign({}, obj)\n    // obj.age = 20\n    // console.log(obj)\n    // console.log(obj1)\n\n    // JSON.stringify 和 JSON.parse 实现深拷贝，但不能拷贝对象中的方法\n    // let obj = {\n    //     name: '张三',\n    //     age: 18,\n    //     like: {\n    //         a: 11,\n    //         b: 22\n    //     }\n    // }\n    // let str = JSON.stringify(obj)\n    // let obj1 = JSON.parse(str)\n    // obj.like.a = 10\n    // console.log(obj)\n    // console.log(obj1)\n\n    // 递归实现深拷贝\n    let obj = {\n        name: '张三',\n        age: 18,\n        like: {\n            a: 11,\n            b: 22\n        },\n        arr: [1, 2, 3, 4]\n    }\n\n    function copy(obj) {\n        let newObj = obj.constructor === Array ? [] : {};\n        for (let i in obj) {\n            if (obj[i] instanceof(Object || Array)) {\n                newObj[i] = copy(obj[i])\n            } else {\n                newObj[i] = obj[i]\n            }\n        }\n        return newObj\n    }\n\n    let obj1 = copy(obj)\n    obj.age = 20\n    obj.like.a = 15\n    obj.arr.push(5)\n    console.log(obj)\n    console.log(obj1)\n")])])]),t("h3",{attrs:{id:"es6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6"}},[e._v("#")]),e._v(" ES6")]),e._v(" "),t("p",[e._v("1.let 和const")]),e._v(" "),t("p",[e._v("var定义变量，会有变量声名提升，let不会。")]),e._v(" "),t("p",[e._v("var定义全局的变量，let和const定义块级的变量。")]),e._v(" "),t("p",[e._v("const定义常量。for循环用let。")]),e._v(" "),t("p",[e._v("2.模板字符串")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 模板字符串\n    let box = document.getElementById('box')\n    let name = '张三'\n    let age = '18'\n    let str = \"<ul><li>\" + name + \"</li></ul>\"\n    let str1 = `<ul><li>${name}</li></ul>`\n    box.innerHTML = str1\n")])])]),t("p",[e._v("3..函数默认值")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 函数默认值\n    function add(a = 10, b = 20) {\n        return a + b\n    }\n    console.log(add()) //30\n")])])]),t("p",[e._v("函数剩余参数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 剩余参数 将多个参数合并为一个数组\n\n    function fn(...arg) {\n        console.log(arg)\n    }\n    fn(1, 2, 3, 4, 5, 6)\n")])])]),t("p",[e._v("4.拓展运算符")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 拓展运算符 将数组分离为多项参数\n\n    console.log(Math.max(1, 2, 3))\n    let arr = [1, 2, 3, 4, 6, 8, 4, 9, 7]\n    console.log(Math.max(...arr))\n")])])]),t("p",[e._v("5.箭头函数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 箭头函数\n    let fn = (a, b) => a + b\n    console.log(fn(1, 2))\n")])])]),t("p",[e._v("箭头函数没有this指向")]),e._v(" "),t("p",[e._v("箭头函数不能使用new来实例化对象")]),e._v(" "),t("p",[e._v("this指向：")]),e._v(" "),t("p",[e._v("1.普通函数，this指向window")]),e._v(" "),t("p",[e._v("2.谁调用指向谁")]),e._v(" "),t("p",[e._v("3.call、apply、bind这三个方法将this指向绑定在传入的对象上")]),e._v(" "),t("p",[e._v("4.new实例化后指向实例对象")]),e._v(" "),t("p",[e._v("5.箭头函数 ，根据外层作用域来决定this")]),e._v(" "),t("p",[e._v("call，apply，bind的区别？")]),e._v(" "),t("p",[e._v("call和apply改变this指向，bind则是绑定this指向后返回新函数。")]),e._v(" "),t("p",[e._v("call和apply立即执行，bind需要调用才执行。")]),e._v(" "),t("p",[e._v("call如果传的多个参数，依次填，apply则是第二个参数是数组。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    let boy = {\n        name: '小小',\n        fn() {\n            console.log(this.name)\n        },\n        like(a, b) {\n            console.log('喜欢' + a + '和' + b)\n        }\n    }\n\n    let man = {\n        name: '王大',\n    }\n    boy.fn()\n    boy.fn.call(man)\n    boy.like.call(man, '吃饭', '唱歌')\n    boy.like.apply(man, ['睡觉', '玩'])\n    let fn1 = boy.like.bind(man, '吃饭1', '唱歌1')\n")])])]),t("p",[e._v("6.解构赋值")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 解构赋值 赋值运算符的拓展\n    let man = {\n        name: '张三',\n        age: 18\n    }\n    let {\n        name,\n        age\n    } = man\n    console.log(name, age)\n    let arr = [1, 2, 3]\n    let [a, b, c] = arr\n    console.log(a, b, c)\n")])])]),t("p",[e._v("7.对象的方法")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 对象的方法\n\n    // 1.'is()'  等价于 '==='  比较两个值相等否\n    console.log(Object.is(NaN, NaN))\n\n\n    // 2. assign() 对象的合并\n    // Object.assign(obj, obj1, obj2) obj为目标对象\n\n    let obj = {}\n    let obj1 = {\n        name: '张三'\n    }\n    let obj2 = {\n        age: 18\n    }\n    Object.assign(obj, obj1, obj2)\n    console.log(obj)\n    console.log(obj1)\n    console.log(obj2)\n")])])]),t("p",[e._v("8.set和map")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // Set  Set允许你存储任何类型的唯一值，无论是原始值或者是对象引用。\n    let arr = [1, 2, 2, 3, 5, 5, 6, 6, 7, 7, 7, 8]\n    let set = new Set(arr)\n    set.add(10)\n    set.delete(8)\n    console.log(set.has(10))\n    console.log(set)\n    let arr1 = [...set]\n    console.log(arr1)\n\n    // Set 是无重复值的有序列表,有点像数组。\n    // Map 是有序的键值对，其中的键允许是任何类型，有点像对象。\n\n    let map = new Map()\n    map.set('name', '张三')\n    console.log(map)\n")])])]),t("h3",{attrs:{id:"promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[e._v("#")]),e._v(" Promise")]),e._v(" "),t("p",[e._v("Promise 是异步编程的一种解决方案")]),e._v(" "),t("p",[t("code",[e._v("Promise")]),e._v("对象是一个构造函数，用来生成"),t("code",[e._v("Promise")]),e._v("实例")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // promise \n    let pro = new Promise((res, rej) => {\n        let man = {\n            name: '张三',\n            age: '18'\n        }\n        res(man)\n    })\n    pro.then(res => {\n        // console.log(res)\n    })\n    // console.log(pro)\n    let pro1 = new Promise((res, rej) => {\n        res(1)\n    })\n    // console.log(pro1)\n    async function getdata() {\n        let a = await pro1\n        console.log(a)\n    }\n    getdata()\n")])])]),t("p",[e._v("10.class类")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // es6 类与继承\n\n    class Cat {\n        constructor(name, age) {\n            this.name = name;\n            this.age = age\n        }\n    }\n    let cat = new Cat('大喵', 3)\n    Cat.prototype.like = function () {\n        console.log('猫喜欢睡觉')\n    }\n    cat.like()\n\n    class Dog extends Cat {\n        wang() {\n            console.log('旺旺')\n        }\n    }\n    let wc = new Dog('旺财',4)\n    console.log(wc)\n    wc.wang()\n\n\t// 原型的继承\n\t//有 A,B两个类，B要继承A，让B的prototype = A 的实例\n    B.prototype = new A()\n")])])]),t("h3",{attrs:{id:"http的状态码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http的状态码"}},[e._v("#")]),e._v(" http的状态码")]),e._v(" "),t("p",[e._v("1XX：信息状态码")]),e._v(" "),t("p",[e._v("2XX：成功状态码")]),e._v(" "),t("p",[e._v("3XX：重定向")]),e._v(" "),t("p",[e._v("4XX：客户端错误")]),e._v(" "),t("p",[e._v("5XX：服务器错误")]),e._v(" "),t("p",[e._v("常见状态码：")]),e._v(" "),t("p",[e._v("304 自从上次请求后，请求的网页未修改过。")]),e._v(" "),t("p",[e._v("401 没有权限，请求要求身份验证。")]),e._v(" "),t("p",[e._v("403 服务器已经理解请求，但是拒绝执行它。")]),e._v(" "),t("p",[e._v("404 请求失败")]),e._v(" "),t("p",[e._v("500 服务器遇到一个未曾预料的情况，导致无法完成对请求的处理")]),e._v(" "),t("p",[e._v("503 由于请示服务器维护或者过载，服务器当前无法处理请求")]),e._v(" "),t("h3",{attrs:{id:"get与post的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get与post的区别"}},[e._v("#")]),e._v(" get与post的区别")]),e._v(" "),t("p",[e._v("GET在浏览器回退时是无害的，而POST会再次提交请求")]),e._v(" "),t("p",[e._v("GET产生的URL地址可被Bookmark，而POST不可以")]),e._v(" "),t("p",[e._v("GET请求会被浏览器主动cache缓存，而POST不会，除非手动设置")]),e._v(" "),t("p",[e._v("GET请求只能进行url编码，而POST支持多种编码方式。")]),e._v(" "),t("p",[e._v("GET请求参数会被完整的保留在浏览器历史记录中，而POST中的参数不会被保留")]),e._v(" "),t("p",[e._v("GET请求在URL中传送的参数是有长度限制的，而POST没有")]),e._v(" "),t("p",[e._v("对参数的数据类型，GET只接受ASCII字符，而POST没有限制")]),e._v(" "),t("p",[e._v("GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息")]),e._v(" "),t("p",[e._v("GET参数通过URL传递，POST放在Request body中")]),e._v(" "),t("h3",{attrs:{id:"ajax的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ajax的过程"}},[e._v("#")]),e._v(" ajax的过程")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 1.创建xhr对象\n    var xhr = new XMLHttpRequest()\n    // 2.设置请求方式\n    xhr.open('method', URL, async);\n    // 3.设置回调函数\n    xhr.onreadystatechange = () => {\n        if (xhr.readyState !== 4) return\n        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {\n            console.log(111)\n        } else {\n            console.log(000)\n        }\n    }\n    // 4.发送请求\n    xhr.send()\n    // 5.结果处理\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);